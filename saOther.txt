#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MAX_CITIES = 100;

// Funkcja do obliczania odległości między dwoma miastami
double calculateDistance(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

// Funkcja do obliczania długości trasy
double calculateRouteLength(int* route, double* x, double* y, int numCities) {
    double totalDistance = 0.0;
    for (int i = 0; i < numCities - 1; ++i) {
        totalDistance += calculateDistance(x[route[i]], y[route[i]], x[route[i + 1]], y[route[i + 1]]);
    }
    totalDistance += calculateDistance(x[route[numCities - 1]], y[route[numCities - 1]], x[route[0]], y[route[0]]);
    return totalDistance;
}

// Funkcja do zamiany dwóch miast w trasie
void swapCities(int* route, int i, int j) {
    int temp = route[i];
    route[i] = route[j];
    route[j] = temp;
}

// Funkcja główna algorytmu Simulated Annealing
void simulatedAnnealing(double* x, double* y, int numCities, int* bestRoute) {
    // Inicjalizacja trasy początkowej
    int* currentRoute = new int[numCities];
    for (int i = 0; i < numCities; ++i) {
        currentRoute[i] = i;
    }

    // Losowe ustawienie seed
    srand(time(0));

    // Parametry algorytmu
    double T = 10000.0; // Początkowa temperatura
    double coolingRate = 0.995;
    double absoluteZero = 1e-8;

    // Obliczanie początkowej długości trasy
    double currentLength = calculateRouteLength(currentRoute, x, y, numCities);
    double bestLength = currentLength;

    // Kopiowanie trasy do najlepszej
    for (int i = 0; i < numCities; ++i) {
        bestRoute[i] = currentRoute[i];
    }

    // Symulowane wyżarzanie
    while (T > absoluteZero) {
        // Wybieranie dwóch miast do zamiany
        int city1 = rand() % numCities;
        int city2 = rand() % numCities;

        // Upewnij się, że city1 i city2 są różne
        while (city1 == city2) {
            city2 = rand() % numCities;
        }

        // Zamiana miast
        swapCities(currentRoute, city1, city2);

        // Obliczanie długości nowej trasy
        double newLength = calculateRouteLength(currentRoute, x, y, numCities);

        // Akceptacja nowej trasy z prawdopodobieństwem zależnym od różnicy długości i temperatury
        if (newLength < currentLength || exp((currentLength - newLength) / T) > ((double)rand() / RAND_MAX)) {
            currentLength = newLength;
            if (currentLength < bestLength) {
                bestLength = currentLength;
                for (int i = 0; i < numCities; ++i) {
                    bestRoute[i] = currentRoute[i];
                }
            }
        } else {
            // Cofnięcie zamiany, jeśli nowa trasa nie została zaakceptowana
            swapCities(currentRoute, city1, city2);
        }

        // Schładzanie
        T *= coolingRate;
    }

    delete[] currentRoute;
}

int main() {
    int numCities;
    cout << "Podaj liczbe miast: ";
    cin >> numCities;

    double* x = new double[numCities];
    double* y = new double[numCities];
    int* bestRoute = new int[numCities];

    cout << "Podaj współrzędne miast (x y):\n";
    for (int i = 0; i < numCities; ++i) {
        cin >> x[i] >> y[i];
    }

    simulatedAnnealing(x, y, numCities, bestRoute);

    cout << "Najlepsza trasa: ";
    for (int i = 0; i < numCities; ++i) {
        cout << bestRoute[i] << " ";
    }
    cout << endl;

    delete[] x;
    delete[] y;
    delete[] bestRoute;

    return 0;
}